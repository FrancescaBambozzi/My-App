{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\bambo\\\\OneDrive\\\\Desktop\\\\Travel App\\\\itinerary-app\\\\client\\\\src\\\\components\\\\containers\\\\Cities.js\";\nimport React, { Component } from \"react\";\nimport axios from 'axios';\nexport default class Cities extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      error: null,\n      isLoaded: false,\n      cities: []\n    };\n  }\n\n  componentDidMount() {\n    axios.get(\"/cities/all\").then(result => {\n      this.setState({\n        isLoaded: true,\n        cities: result.data\n      });\n    }, // Note: it's important to handle errors here\n    // instead of a catch() block so that we don't swallow\n    // exceptions from actual bugs in components.\n    error => {\n      this.setState({\n        isLoaded: true,\n        error\n      });\n    });\n  }\n\n  render() {\n    const _this$state = this.state,\n          error = _this$state.error,\n          isLoaded = _this$state.isLoaded,\n          cities = _this$state.cities;\n\n    if (error) {\n      return React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 34\n        },\n        __self: this\n      }, \"Error: \", error.message);\n    } else if (!isLoaded) {\n      return React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 36\n        },\n        __self: this\n      }, \"Loading...\");\n    } else {\n      return React.createElement(\"ul\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 39\n        },\n        __self: this\n      }, cities.map(item => React.createElement(\"li\", {\n        key: item.username,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 41\n        },\n        __self: this\n      }, item.username, \": \", item.name)));\n    }\n  }\n\n}","map":{"version":3,"sources":["C:/Users/bambo/OneDrive/Desktop/Travel App/itinerary-app/client/src/components/containers/Cities.js"],"names":["React","Component","axios","Cities","state","error","isLoaded","cities","componentDidMount","get","then","result","setState","data","render","message","map","item","username","name"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,OAAOC,KAAP,MAAkB,OAAlB;AAEA,eAAe,MAAMC,MAAN,SAAqBF,SAArB,CAA+B;AAAA;AAAA;AAAA,SAC1CG,KAD0C,GAClC;AACJC,MAAAA,KAAK,EAAE,IADH;AAEJC,MAAAA,QAAQ,EAAE,KAFN;AAGJC,MAAAA,MAAM,EAAE;AAHJ,KADkC;AAAA;;AAO1CC,EAAAA,iBAAiB,GAAG;AAChBN,IAAAA,KAAK,CAACO,GAAN,CAAU,aAAV,EAAyBC,IAAzB,CACIC,MAAM,IAAI;AACN,WAAKC,QAAL,CAAc;AACVN,QAAAA,QAAQ,EAAE,IADA;AAEVC,QAAAA,MAAM,EAAEI,MAAM,CAACE;AAFL,OAAd;AAIH,KANL,EAOI;AACA;AACA;AACAR,IAAAA,KAAK,IAAI;AACL,WAAKO,QAAL,CAAc;AACVN,QAAAA,QAAQ,EAAE,IADA;AAEVD,QAAAA;AAFU,OAAd;AAIH,KAfL;AAiBH;;AAEDS,EAAAA,MAAM,GAAG;AAAA,wBAC+B,KAAKV,KADpC;AAAA,UACGC,KADH,eACGA,KADH;AAAA,UACUC,QADV,eACUA,QADV;AAAA,UACoBC,MADpB,eACoBA,MADpB;;AAEL,QAAIF,KAAJ,EAAW;AACP,aAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBAAaA,KAAK,CAACU,OAAnB,CAAP;AACH,KAFD,MAEO,IAAI,CAACT,QAAL,EAAe;AAClB,aAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBAAP;AACH,KAFM,MAEA;AACH,aACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACKC,MAAM,CAACS,GAAP,CAAWC,IAAI,IACZ;AAAI,QAAA,GAAG,EAAEA,IAAI,CAACC,QAAd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACKD,IAAI,CAACC,QADV,QACsBD,IAAI,CAACE,IAD3B,CADH,CADL,CADJ;AASH;AACJ;;AA5CyC","sourcesContent":["import React, { Component } from \"react\";\r\nimport axios from 'axios';\r\n\r\nexport default class Cities extends Component {\r\n    state = {\r\n        error: null,\r\n        isLoaded: false,\r\n        cities: []\r\n    };\r\n\r\n    componentDidMount() {\r\n        axios.get(\"/cities/all\").then(\r\n            result => {\r\n                this.setState({\r\n                    isLoaded: true,\r\n                    cities: result.data\r\n                });\r\n            },\r\n            // Note: it's important to handle errors here\r\n            // instead of a catch() block so that we don't swallow\r\n            // exceptions from actual bugs in components.\r\n            error => {\r\n                this.setState({\r\n                    isLoaded: true,\r\n                    error\r\n                });\r\n            }\r\n        );\r\n    }\r\n\r\n    render() {\r\n        const { error, isLoaded, cities } = this.state;\r\n        if (error) {\r\n            return <div>Error: {error.message}</div>;\r\n        } else if (!isLoaded) {\r\n            return <div>Loading...</div>;\r\n        } else {\r\n            return (\r\n                <ul>\r\n                    {cities.map(item => (\r\n                        <li key={item.username}>\r\n                            {item.username}: {item.name}\r\n                        </li>\r\n                    ))}\r\n                </ul>\r\n            );\r\n        }\r\n    }\r\n}"]},"metadata":{},"sourceType":"module"}